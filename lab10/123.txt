void bfs(vector<vector<int>>& graph, int vertex, vector<int>& distances) {
    int n = graph.size();
    vector<bool> visited(n, false);
    queue<int> q;
    q.push(vertex);
    visited[vertex] = true;
    distances[vertex] = 0;

    while (!q.empty()) {
        int currentVertex = q.front();
        q.pop();

        for (int i = 0; i < n; i++) {
            if (graph[currentVertex][i] != 0 && !visited[i]) {
                q.push(i);
                visited[i] = true;
                distances[i] = distances[currentVertex] + 1;
            }
        }
    }
}

// Функция для нахождения периферийных вершин ориентированного графа
void findPeripheralVerticesOriented(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> eccentricities(n, 0);

    for (int i = 0; i < n; i++) {
        vector<int> distances(n, INF);
        bfs(graph, i, distances);

        for (int j = 0; j < n; j++) {
            if (distances[j] > eccentricities[i]) {
                eccentricities[i] = distances[j];
            }
        }
    }

    int maxEccentricity = 0;
    for (int i = 0; i < n; i++) {
        if (eccentricities[i] > maxEccentricity) {
            maxEccentricity = eccentricities[i];
        }
    }

    cout << "Периферийные вершины ориентированного графа: ";
    for (int i = 0; i < n; i++) {
        if (eccentricities[i] == maxEccentricity) {
            cout << i << " ";
        }
    }
    cout << endl;
}

// Функция для нахождения центральных вершин ориентированного графа
void findCentralVerticesOriented(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> eccentricities(n, INF);

    for (int i = 0; i < n; i++) {
        vector<int> distances(n, INF);
        bfs(graph, i, distances);

        for (int j = 0; j < n; j++) {
            if (distances[j] < eccentricities[i]) {
                eccentricities[i] = distances[j];
            }
        }
    }

    int minEccentricity = INF;
    for (int i = 0; i < n; i++) {
        if (eccentricities[i] < minEccentricity) {
            minEccentricity = eccentricities[i];
        }
    }

    cout << "Центральные вершины ориентированного графа: ";
    for (int i = 0; i < n; i++) {
        if (eccentricities[i] == minEccentricity) {
            cout << i << " ";
        }
    }
    cout << endl;
}

// Функция для нахождения периферийных вершин неориентированного графа
void findPeripheralVerticesUnoriented(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> eccentricities(n, 0);

    for (int i = 0; i < n; i++) {
        vector<int> distances(n, INF);
        bfs(graph, i, distances);

        for (int j = 0; j < n; j++) {
            if (distances[j] > eccentricities[i]) {
                eccentricities[i] = distances[j];
            }
        }
    }

    int maxEccentricity = 0;
    for (int i = 0; i < n; i++) {
        if (eccentricities[i] > maxEccentricity) {
            maxEccentricity = eccentricities[i];
        }
    }

    cout << "Периферийные вершины неориентированного графа: ";
    for (int i = 0; i < n; i++) {
        if (eccentricities[i] == maxEccentricity) {
            cout << i << " ";
        }
    }
    cout << endl;
}

// Функция для нахождения центральных вершин неориентированного графа
void findCentralVerticesUnoriented(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> eccentricities(n, INF);

    for (int i = 0; i < n; i++) {
        vector<int> distances(n, INF);
        bfs(graph, i, distances);

        for (int j = 0; j < n; j++) {
            if (distances[j] < eccentricities[i]) {
                eccentricities[i] = distances[j];
            }
        }
    }

    int minEccentricity = INF;
    for (int i = 0; i < n; i++) {
        if (eccentricities[i] < minEccentricity) {
            minEccentricity = eccentricities[i];
        }
    }

    cout << "Центральные вершины неориентированного графа: ";
    for (int i = 0; i < n; i++) {
        if (eccentricities[i] == minEccentricity) {
            cout << i << " ";
        }
    }
    cout << endl;
}

int main() {
    int n;
    cout << "Введите количество вершин графа: ";
    cin >> n;

    vector<vector<int>> graph(n, vector<int>(n, 0));

    cout << "Введите матрицу смежности графа:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> graph[i][j];
        }
    }

    findPeripheralVerticesOriented(graph);
    findCentralVerticesOriented(graph);
    findPeripheralVerticesUnoriented(graph);
    findCentralVerticesUnoriented(graph);

    return 0;
}